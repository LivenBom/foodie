<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.imooc</groupId>
    <artifactId>foodie</artifactId>
    <version>1.0-SNAPSHOT</version>


    <!-- pom.xml文件的packaging标签，表示当前项目是一个pom项目，不会生成jar包   -->
    <packaging>pom</packaging>


    <!--
      配置子模块
      1. 聚合工程里可以分为顶级项目（顶级工程、父工程）与子工程，这两者的关系其实就是父子继承的关系
        子工程在maven里称为模块（module），模块之间是平级，是可以互相依赖的
      2. 子模块可以使用顶级工程里所有的资源（依赖），子模块之间如果要使用资源，必须构建依赖（构建关系）
      3. 一个顶级工程可以由多个不同的子工程共同组合而成
        -->
    <modules>
        <module>foodie-common</module>
        <module>foodie-pojo</module>
        <module>foodie-mapper</module>
        <module>foodie-service</module>
        <module>foodie-api</module>
    </modules>

    <!-- 搭建一个SpringBoot项目的基础，设置parent为：spring-boot-starter-parent    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.0</version>
        <relativePath />
    </parent>


    <!-- 项目属性设置   -->
    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <dependencies>

        <!--  SpringBoot      -->
        <dependency>
            <!--
                1.  注意的是：这里添加的关于spring-boot-starter相关的依赖，
                    都是没有设置版本号的，因为在parent父级项目中，已经有统一的设置
                2.  是构建SpringBoot项目的基础依赖，包含了SpringBoot项目的基础功能
                    专为简化SpringBoot项目的配置和依赖管理设计
            -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <!--  不使用默认的日志系统，将其排除          -->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <!--
                用于在Java项目中包含SpringBoot的Web模块
                用于开发web应用和RESTful 服务的一个便捷方式，包含这个依赖能够快速构建基于SpringMVC的应用程序
                支持包括REST API, SpringMVC 和 默认的Tomcat容器在内的功能
            -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <!--
                 是应用于SpringBoot项目的一个依赖，用于解析配置文件
                 主要用于处理application.properties和application.yml文件
                 1. 自动扫描项目中所有的@ConfigurationProperties注解的类，生成配置元数据文件，是IDE能够提供自动补全、文件悬停描述和检验功能
                 2. 通过生成的配置元数据，开发者在编写application.properties和application.yml文件时，IDE能够提供自动补全、文件悬停描述和检验功能
                 3. 开发者定义自己的配置属性类时，使用@ConfigurationProperties注解
             -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

</project>